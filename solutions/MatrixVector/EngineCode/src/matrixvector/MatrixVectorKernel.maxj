// matrix-vector kernel
// unrolled dot product

package matrixvector;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class MatrixVectorKernel extends Kernel {

	final DFEType scalarType = dfeFloat(8, 24);
	final int counterWidth = 32;

	MatrixVectorKernel(KernelParameters parameters, int K) {
		super(parameters);

		DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(scalarType, K);

		// count 0..K-1
		DFEVar count = control.count.simpleCounter(counterWidth, K);

		// Input: line of matrix and vector
		DFEVector<DFEVar> in1 = io.input("inMat", vectorType);
		// read new vector when count == 0
		DFEVector<DFEVar> in2 = io.input("inVec", vectorType, count === 0);

		DFEVar sum = constant.var(scalarType, 0.0);

		// fully unroll dot product
		for (int k = 0; k < K; k++)
			sum += in1[k] * in2[k];

		io.output("output", sum, scalarType); // dot product
	}
}
